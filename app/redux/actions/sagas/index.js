import {fork, take, all} from 'redux-saga/effects';
import * as triggers from './triggers';
import {REHYDRATE, PURGE} from 'redux-persist/lib/constants';

export default function* rootSaga() {
  yield all([
    fork(triggers.triggerAppBootstrap),
    fork(triggers.triggerCheckConnection),
    fork(triggers.triggerRefetchHomeCategories),
    // fork(userSagas.refetchUsers),
    fork(triggers.triggerGetUser),
    fork(triggers.triggerGetDesigner),
    fork(triggers.triggerGetShopper),
    fork(triggers.triggerGetCompany),
    fork(triggers.triggerGetCelebrity),
    fork(triggers.triggerGetVideo),
    fork(triggers.triggerSubmitAuth),
    fork(triggers.triggerGoogleLogin),
    fork(triggers.triggerReAuthenticate),
    fork(triggers.triggerUpdateUser),
    fork(triggers.triggerSubmitLogout),
    fork(triggers.triggerRegister),
    fork(triggers.triggerCompanyRegister),
    fork(triggers.triggerRateUser),
    fork(triggers.triggerBecomeFan),
    fork(triggers.triggerGetProduct),
    fork(triggers.triggerGetSearchProducts),
    fork(triggers.triggerGetService),
    fork(triggers.triggerGetSearchServices),
    fork(triggers.triggerGetSearchCompanies),
    fork(triggers.triggerGetSearchDesigners),
    fork(triggers.triggerGetSearchCelebrities),
    fork(triggers.triggerGetAllProducts),
    fork(triggers.triggerGetCollections),
    fork(triggers.triggerTriggerGetCollection),
    fork(triggers.triggerGetAllClassifieds),
    fork(triggers.triggerGetSearchClassifieds),
    fork(triggers.triggerGetClassified),
    fork(triggers.triggerDeleteClassified),
    fork(triggers.triggerStartNewClassified),
    fork(triggers.triggerStoreClassified),
    fork(triggers.triggerEditClassified),
    fork(triggers.triggerGetHomeClassifieds),
    fork(triggers.triggerStartClassifiedSearching),
    fork(triggers.triggerGetMyClassifieds),
    fork(triggers.triggerGetHomeCompanies),
    fork(triggers.triggerGetHomeDesigners),
    fork(triggers.triggerGetHomeCelebrities),
    fork(triggers.triggerToggleProductFavorite),
    fork(triggers.triggerChangeLang),
    fork(triggers.triggerGetCategoryAndGoToNavChildren),
    fork(triggers.triggerGetParentCategories),
    fork(triggers.triggerGetHomeCategories),
    fork(triggers.triggerToggleClassifiedFavorite),
    fork(triggers.triggerGoBackBtn),
    fork(triggers.triggerGoDeepLinking),
    fork(triggers.triggerRefetchHomeElements),
    fork(triggers.triggerAddToCart),
    fork(triggers.triggerRemoveFromCart),
    fork(triggers.triggerClearCart),
    fork(triggers.triggerSubmitCart),
    fork(triggers.triggerChooseCountry),
    fork(triggers.triggerSetPlayerId),
    fork(triggers.triggerGetCoupon),
    fork(triggers.triggerCreateMyFatoorahPaymentUrl),
    fork(triggers.triggerCreateTapPaymentUrl),
    fork(triggers.triggerCreateCashOnDeliveryPayment),
    fork(triggers.triggerGoDeepLinking),
    fork(triggers.triggerAddComment),
    fork(triggers.triggerResetStore),
    fork(triggers.triggerGetRoles),
    // fork(networkSaga, {pingInterval: 20000}),
  ]);
  yield take(REHYDRATE); // Wait for rehydrate to prevent sagas from running with empty store
  yield take(PURGE);
}

// Flixable :: fire an action which is empty payload
// then takeLatest(the action fired, then do some sagahere)
